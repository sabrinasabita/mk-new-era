Requirements List for Release PlugIn mk-new-era 1.0

Instructions:
	Please follow ** to find concerns or not clear concepts to be explained in other words.
	Thanks in advance for your time.

Career and Role Requirements:

	This is a web engineering position with back-end focus. 
	
	The technical skills we expect for this role are:
		a solid modern PHP knowledge with a focus on OOP principles and practices
		a good-to-excellent knowledge and experience with WordPress, especially in plugin development
		hands-on experience in automated tests in PHP and WordPress context
		hands-on experience with Git
		solid knowledge of the “basics of the web”, such as HTML and CSS
		a clear understanding of principles of application security (in PHP and WordPress context)

	Moreover, we also appreciate:
		Knowledge and experience in “classic” ES5 JavaScript and jQuery. 
		Expertise with React and/or other tools in the modern JavaScript ecosystem is nice to have
		understanding of the principles and practices of web accessibility
		a clear understanding of general computer networking principles and most common web protocols
		knowledge and hands-on experience with Docker and its ecosystem
		development experience using modern PHP packages and/or frameworks outside the WP ecosystem
	
	What's next after code?
		If we like your code... 
		then we will invite you to an interview via video conferencing 
		as a next step to get to know you personally.
            
TASK ASSIGNED:

	** To make this more agile for delivery I prefer give you the product in recursive and succesive software versions.
	
    Target Conclusion for Version 1.0 by now (** Please correct me if I'm wrong.): 
		Wordpress Plugin, The plugin will parse the JSON response and will use it to build and display an HTML table
		according to wordpress context and security, using for modern UX Funtionallity with Vainilla Javascript.
    
    Contact data: email : jobs@impsyde.com <Impsyde GmbH>
	
	** Not clear to me Sentences and Why
	1. You have the choice of technology to use.
	
		JS
			To make some examples, the code could be written in vanilla ES5 code, 
			using 3rd party libraries like jQuery or whatnot, 
			or implemented with vanilla modern JS, or TypeScript, React, Svelte, etc...

		CSS
			The styling (CSS) is also up to you, you could even add no style at all. 
			Responsiveness is not required but appreciated. 
			The technology choice for styling is once again up to you. 
			Plain old CSS, SASS, Less, Stylus, PostCSS, etc... are all valid choices.
	
		Why... you technology proposal is too "open" and complex to be accomplished in short time
		and is oppose to the guidance typed in point number 1.
		
		--> This feature requires JavaScript, of course. <-- oppose 1.
		When a visitor clicks any of these links, the details of that user must be shown. 
		For that, the plugin will do another API request to the user-details endpoint.
		See https://jsonplaceholder.typicode.com/guide.html for documentation.
		These details fetching requests must be asynchronous (AJAX) and the user details will be shown without reloading the page.
		At any time, the page will show details for at max one user. 
		In fact, at every link click, a new user detail will load, replacing the one currently shown.

    Guidance
        We strive for quality
        hands-on, no end time, show your skills, 
        prefer high-quality mandatory requirements
        don’t over-do
        keep it simple, make it work, explain why, care of details.
        Keep New  Code
        Code to be compliant with Inpsyde code style
		But we prefer if your extra effort, if any, will focus on the server-side, being the role back-end focused.
		Software Licence: A license, preferably in a LICENSE file in the repository root. 
			We don't require any specific license, nor we will ever share your work without your permission. 
			The license should at a very minimum allow us to access and store your work. 
			If you want to use an OS license, feel free to do so.
			You can ship more if you desire. 
		The lack of optional features will not generate a negative evaluation.
		But truth to be told, we can’t say the same about poorly implemented optional features.
		Automated tests (more on this topic will follow below)

    Optional
        jQuery, React, Web Protocols, modern packages and frameworks
        The styling (CSS) is also up to you, you could even add no style at all. 
        Endpoint details (But you can show more details if you want).
		
		We don’t mind you to use any JavaScript, including 3rd party libraries, to improve the table look and feel.
		Things like client-side ordering and filtering, for example, are ok but not required.
		
		JS
			To make some examples, the code could be written in vanilla ES5 code, 
			using 3rd party libraries like jQuery or whatnot, 
			or implemented with vanilla modern JS, or TypeScript, React, Svelte, etc...

		CSS
			The styling (CSS) is also up to you, you could even add no style at all. 
			Responsiveness is not required but appreciated. 
			The technology choice for styling is once again up to you. 
			Plain old CSS, SASS, Less, Stylus, PostCSS, etc... are all valid choices.

    Mandatory
        About Role : WP (Ecosystem, Context, Security, Plugin Development), OOP,  Git, HTML, CSS

        latest version of WordPress  5.4.1 (May 6,2020 16:00 Argentina)
        PHP Version Tested and Supported 7.3

        The API is available at https://jsonplaceholder.typicode.com and the endpoint to call is /users.
        The column's id, name, and username are mandatory,
        Each row in the HTML table will show the details for a user. 
        The column's id, name, and username are mandatory, but you can show more details if you want.
		The content of three mandatory columns must be a link (<a> tag). 

        
        See https://jsonplaceholder.typicode.com/guide.html for documentation.
        
        The content of three mandatory columns must be a link (<a> tag). 
        When a visitor clicks any of these links, the details of that user must be shown. 
        For that, the plugin will do another API request to the user-details endpoint.
		
		We expect some kind of cache for HTTP requests.
		The rationale behind it is up to you, please make a decision and document it in the README.
		
		Error handling for the external HTTP requests is also required: navigation must not be disrupted if a request fails.
		Full Composer support... A README, in English, in Markdown-Formatting, explaining plugin usage and decisions behind implementation
        

        The README is complete with:

            1. README writing in markdown format
            2. List of requirements
            3. Installation and usage instructions
            4. Explanations behind non-obvious implementation choices
            5. Your composer.json is valid and complete, and running composer install makes the plugin ready to be used.
            6. The work has a license.
            7. There are no /** TODO **/ leftover
            8. The latest version of all the code has been committed to BitBucket in a private repository
            9. The user jobs-task@inpsyde.com has read access to the repository (??Git or BitBucket)

                Final Code
                    Git, BitBucket, private, read access to jobs-task@inpsyde.com
                    
		Testing
			Unit tests have to be provided. 
			About automated tests

			Unit tests have to be provided. 
			When we say “unit tests” we mean tests that run without loading WordPress nor the external API.

			Inpsyde employee Giuseppe wrote an answer on WordPress Stack Exchange about this topic. 
			We also suggest having a look at Brain Monkey, a tool to write unit tests for WordPress.
			Note that using this tool is a suggestion and it is not required at all.

			We do not expect 100% code coverage. 
			We want you to write tests as a means to verify either your experience with the topic or 
			the way you handle demand on a topic you have no experience with.

			Other kinds of tests, for example, tests that load WordPress and/or the external API are not required.
			You can write those if you wish, but make sure they pass if you do.

			Some ideas: 
				a) Make the endpoint customizable via options, 
				b) Make the plugin extensible/customizable via hooks, 
				c) Allow customization of the rendered page via template override in theme... etc.


		About Composer dependencies

			Composer support is mandatory, and pulling packages via Composer is an allowed practice. 
			And between tests and code style checks development dependencies will likely be there.

			It is also allowed to use dependencies for production code. 
			That said, we appreciate it when dependencies are kept to the very essential. 
			Please use the README to briefly explain why a Composer package has been added.

			At Inpsyde, we use Composer to manage the whole website code. 
			We use it to install WordPress itself, alongside all plugins and themes, and we load Composer autoload in wp-config.php. 
			We will appreciate it if the delivered plugin will be compliant with this workflow.


		About installation steps

			We expect that cloning your repository and running composer update, is all we need to get your plugin ready to be added to WordPress.
			In that’s not the case, or if extra steps are necessary (e.g. to compile frontend assets), you need to document installation steps in the README.

			Note: to ship “compiled” frontend assets in version control is an allowed practice for this assignment.
			A “distribution plugin package” ready to be installed in WordPress (including Composer vendor files, autoload, compiled assets...) is not required. 
			If you decide to ship it, make it available in the “Download” section of the BitBucket repository.

			Is everything ready?

			For your convenience find here a checklist that might help you to make sure you’re ready to submit your code for review:

			the plugin has all required features, 
			and you’ve tested them in a browser using a real WP installation

			the custom endpoint is available

			a table with users’ details is visible when visiting the endpoint
			clicking a user name/username/id in the table loads that user details via AJAX and print them in the page

			unit tests are available and it is possible to run them and all pass with no errors
			PHPCS checks pass with no errors/warnings 
			(you can exclude tests files from check if you wish)

